import "https://api.firecloud.org/ga4gh/v1/tools/stewart%3AoxoG_PoN_blat_Filter_Workflow/versions/1/plain-WDL/descriptor" as filter
import "https://api.firecloud.org/ga4gh/v1/tools/dlivitz%3Ablat_filter/versions/12/plain-WDL/descriptor" as blat2

task SU2C_OrientationBias_filter_Task {
	String ID
	File BAM
	File BAI
	File MAFFile
	File REFERENCE
	File DBSNP
	File DBSNPIDX
	String CONTEXT
	String ALTALLELE
	String STUB
	File detailMetrics
    Int diskGB
	
	command <<<
	#increase verbosity
	set -x

	#prep the MAF
    /usr/local/bin/maf_filter_prep.py ${MAFFile} > no_indels.maf


	#create output directory
	mkdir -v out

	METRICS_IN_LEN=`echo '${detailMetrics}'|tr -d "\n"|wc -c` ;
	echo "DM IS ${detailMetrics}"
	echo "METRICS_IN_LEN IS $METRICS_IN_LEN" ; 
	if [ "$METRICS_IN_LEN" -eq "0" ] ;
	then
		echo "Starting orientation bias filter from BAM ..." ;
		bash -x /usr/local/run_OrientationBias_filter.sh ${ID}  ${BAM} \
		 no_indels.maf ${REFERENCE} ${DBSNP} ${CONTEXT} ${ALTALLELE} ${STUB} /dev/null out ;
	else
		echo "Starting OrientationBiasFilter from passed-in pre_adapter_detail_metrics file ..." ;
		bash -x /usr/local/run_OrientationBias_filter.sh ${ID}  ${BAM} \
		 no_indels.maf ${REFERENCE} ${DBSNP} ${CONTEXT} ${ALTALLELE} ${STUB} ${detailMetrics} out ;
	fi ;

	#zip up all the output
	zip -r out_and_mat.zip ./out ./mat


	>>>

	runtime {
		docker: "broadinstitute/broadmutationcalling_filtering_beta:1"
		memory: "7 GB"
		disks: "local-disk ${diskGB} HDD"
		}

	output  {
		#lane lists
		File detailMetricsOut="out/${ID}.pre_adapter_detail_metrics"
		File MatLabAndFilterDataZip="out_and_mat.zip"
		File filtered_maf="out/${ID}.OrientationBiasFilter.maf"
		File unfiltered_maf="out/${ID}.OrientationBiasFilter.unfiltered.maf"
		}
}


task maf_merge_blat_oxog_ffpe_mp1_mp2_task {

	#data files
	File oxog_all
	File oxog_pass
	File ffpe_all
	File ffpe_pass
	File pon_one_zip
	File pon_two_zip
	File blat_maf_pass
	File blat_maf_all

	String id
	Int diskGB
	File inputMaf
	
	String boot_disk_gb = "10"
    String ram_gb = "4"
    String cpu_cores = "2"
    String preemption = "3"
    

	command <<<

	#increase verbosity
	set -x

	#unzip any zip files
	unzip -d mp1_out ${pon_one_zip}
	unzip -d mp2_out ${pon_two_zip}

	#remove any line starting with #
	for M in `find *_out oxog_unzip   ${inputMaf} ${blat_maf_pass} ${blat_maf_all} | grep -i '\.maf$'   `; do
		echo "Removing lines starting with # from $M" ;
		grep -Pv '^#' $M > tmp.maf ;
		mv -vf tmp.maf $M ;
	done ;

	#make UNION filtered from all data 
	#output contains every row of original input AND has additional columns with each additional column coming from one of the filters
	#1) BLAT
	#2) oxoG
	#3) ffpe
	#4) MP1
	#5) MP2
	OXOG_UNFILTERED=${oxog_all}
	echo "OXOG_UNFILTERED IS $OXOG_UNFILTERED" ; 
	MP1_ALL=`find mp1_out |grep -Pi '\.maf$'|grep -Piv '\.pass\.'` ; 
	echo "MP1_ALL IS $MP1_ALL" ; 
	MP2_ALL=`find mp2_out |grep -Pi '\.maf$'|grep -Piv '\.pass\.'`
	echo "MP2_ALL IS $MP2_ALL" ; 
	python /usr/local/bin/maf_maf_merge.py ${inputMaf} ${blat_maf_all} with_blat.maf && \
	python /usr/local/bin/maf_maf_merge.py with_blat.maf $OXOG_UNFILTERED blat.oxog.maf && \
	python /usr/local/bin/maf_maf_merge.py blat.oxog.maf $FFPE_UNFILTERED blat.oxog.ffpe.maf && \
	python /usr/local/bin/maf_maf_merge.py blat.oxog.ffpe.maf $MP1_ALL blat.oxog.ffpe.mp1.maf && \
	python /usr/local/bin/maf_maf_merge.py blat.oxog.ffpe.mp1.maf $MP2_ALL blat.oxog.ffpe.mp1.mp2.maf && \
	mv -vf blat.oxog.ffpe.mp1.mp2.maf ${id}.blat.oxog.ffpe.mp1.mp2.maf.all.maf
	# exit status
	FIRST_RES=$? ;


	if [ "$FIRST_RES" -eq "0" ] ; 
		then
		#make INTERSECTION filtered
		#output contains rows such that each row passes ALL the filters
		#make union_filtered from all data 
		#output contains every row of original input AND has additional columns with each additional column coming from one of the filters
		#1) BLAT
		#2) oxoG
		#3) ffpe
		#4) MP1
		#5) MP2
		OXOG_FILTERED=${oxog_pass}
		echo "OXOG_FILTERED IS $OXOG_FILTERED" ;
		FFPE_FILTERED=${ffpe_pass}
		echo "FFPE_FILTERED IS $FFPE_FILTERED" ;
		MP1_PASS=`find mp1_out | grep -Pi '\.maf$'|grep -Pi '\.pass\.'`
		echo "MP1_PASS IS $MP1_PASS" ; 
		MP2_PASS=`find mp2_out | grep -Pi '\.maf$'|grep -Pi '\.pass\.'`
		echo "MP2_PASS IS $MP2_PASS" ; 
		python /usr/local/bin/maf_maf_merge.py -i ${inputMaf} ${blat_maf_pass} with_blat.pass.maf && \
		python /usr/local/bin/maf_maf_merge.py -i with_blat.pass.maf $OXOG_FILTERED blat.oxog.pass.maf && \
		python /usr/local/bin/maf_maf_merge.py -i with_blat.oxog.pass.maf $OXOG_FILTERED blat.oxog.ffpe.pass.maf && \
		python /usr/local/bin/maf_maf_merge.py -i blat.oxog.ffpe.pass.maf $MP1_PASS blat.oxog.ffpe.mp1.pass.maf && \
		python /usr/local/bin/maf_maf_merge.py -i blat.oxog.ffpe.mp1.pass.maf $MP2_PASS blat.oxog.ffpe.mp1.mp2.pass.maf && \
		mv -vf blat.oxog.ffpe.mp1.mp2.pass.maf ${id}.filter.blat.oxog.ffpe.mp1.mp2.pass.maf 
		mv $MP1_ALL ${id}.filter.mp1.all.maf 
		mv $MP1_PASS ${id}.filter.mp1.pass.maf 
		mv $MP2_ALL ${id}.filter.mp2.all.maf 
		mv $MP2_PASS ${id}.filter.mp2.pass.maf 
		mv $OXOG_ALL ${id}.filter.oxog.all.maf 
		mv $OXOG_PASS ${id}.filter.oxog.pass.maf 
		mv $FFPE_ALL ${id}.filter.ffpe.all.maf 
		mv $FFPE_PASS ${id}.filter.ffpe.pass.maf 
		mv $BLAT_ALL ${id}.filter.blat.all.maf 
		mv $BLAT_PASS ${id}.filter.blat.pass.maf 
	else
		echo "Error !" ;
		/bin/bash -c "exit 2;" 
	fi ;


	>>>

	output 
		{
		File all_maf="${id}.filter.blat.oxog.ffpe.mp1.mp2.maf.all.maf"
		File pass_maf="${id}.filter.blat.oxog.ffpe.mp1.mp2.pass.maf" 
		File mp1_all_maf="${id}.filter.mp1.all.maf "
		File mp1_pass_maf="${id}.filter.mp1.pass.maf" 
		File mp2_all_maf="${id}.filter.mp2.all.maf "
		File mp2_pass_maf="${id}.filter.mp2.pass.maf" 
		}

	runtime {
		docker : "broadinstitute/blat_filtering:eddie_end_filter_wf_merger"
		disks: "local-disk ${diskGB} HDD"
	    memory: "${ram_gb}GB"
    	cpu: "${cpu_cores}"
    	bootDiskSizeGb: "${boot_disk_gb}"
    	preemptible: "${preemption}"			
		}

}

task maf_counter_task {

	File all_Maf
	File pass_Maf
	Int diskGB


	command <<<

	#increase verbosity
	set -x

	#get counts
	cat ${all_Maf}  | grep -Pv '^#'|grep -Piv '^Hugo'|wc -l > all_count.dat
	cat ${pass_Maf} | grep -Pv '^#'|grep -Piv '^Hugo'|wc -l > pass_count.dat

	>>>

	runtime {
		docker : "broadinstitute/broadmutationcalling_filtering_beta@sha256:d2df6d9d705e90d3ee926b72a3edec5034dd5bdd64c0cf1cabd9fc8462702c79"
		disks  : "local-disk ${diskGB} HDD"
		memory: "0.1 GB"
		}

	output {
		Int all_count=read_int("all_count.dat")
		Int pass_count=read_int("pass_count.dat")
		}

}


workflow FilterWorkflow  {

	Int preemptible
	File oncoDBTarBall
	File inMAF
	File cytoBandFile
	File parameterFile
	String PairID
	String TOTNStr
	Int NMIN
	Float thresh
	Float WCUT
	String CODING_ONLY
	Int MIN_ALT_COUNT
	Boolean useParameterFile
	String TUM_ID
	File REFERENCE
	File DBSNP
	File DBSNPIDX	
	File tumorBam
	File tumorBamIdx
    File metricsFile
    File ponFileOne
    File ponFileTwo

    call  filter.calcDiskSizes {
    input:
	 bamSize=size(tumorBam),
     baiSize=size(tumorBamIdx),
     ponSize=size(ponFileOne),
     mafSize=size(inMAF)
    }

	call blat2.realign as blat {
		input:
			bam=tumorBam,
			bai=tumorBamIdx,
			maf=inMAF,
			id=TUM_ID
		}



	call filter.MAFPonFilter as mp1 {
		input : 
        	PONFile=ponFileOne,
			MAFFile=inMAF,
			cytoBandFile=cytoBandFile,
			useParameterFile=useParameterFile,
			parameterFile=parameterFile,
			PairID=PairID,
			TOTNStr=TOTNStr,
			NMIN=NMIN,
			thresh=thresh,
			WCUT=WCUT,
			CODING_ONLY=CODING_ONLY,
			MIN_ALT_COUNT=MIN_ALT_COUNT,
            diskGB=calcDiskSizes.ponDisk
		}

	call filter.MAFPonFilter as mp2 {
		input : 
           	PONFile=ponFileTwo,
			MAFFile=inMAF,
			cytoBandFile=cytoBandFile,
			useParameterFile=useParameterFile,
			parameterFile=parameterFile,
			PairID=PairID,
			TOTNStr=TOTNStr,
			NMIN=NMIN,
			thresh=thresh,
			WCUT=WCUT,
			CODING_ONLY=CODING_ONLY,
			MIN_ALT_COUNT=MIN_ALT_COUNT,
            diskGB=calcDiskSizes.ponDisk
		}

	call SU2C_OrientationBias_filter_Task as oxoGOBF {
		input :
			detailMetrics=metricsFile,
			ID=TUM_ID,
			BAM=tumorBam,
			BAI=tumorBamIdx,
			MAFFile=inMAF,
			REFERENCE=REFERENCE,
			DBSNP=DBSNP,
			DBSNPIDX=DBSNPIDX,
            diskGB=calcDiskSizes.obfDisk
		}

	call SU2C_OrientationBias_filter_Task as ffpeOBF {
		input :
			detailMetrics=metricsFile,
			ID=TUM_ID,
			BAM=tumorBam,
			BAI=tumorBamIdx,
			MAFFile=inMAF,
			REFERENCE=REFERENCE,
			DBSNP=DBSNP,
			DBSNPIDX=DBSNPIDX,
            diskGB=calcDiskSizes.obfDisk
		}

	call filter.mergeInIndelsToOBF as oxoGmaf{
    	input:
              obfFilteredMaf=oxoGOBF.filtered_maf,
              obfUnfilteredMaf=oxoGOBF.unfiltered_maf,
              origMaf=inMAF,
              diskSize=calcDiskSizes.threeMafGB,
              id=TUM_ID    
	    	}

	call filter.mergeInIndelsToOBF as ffpemaf{
    	input:
              obfFilteredMaf=ffpeOBF.filtered_maf,
              obfUnfilteredMaf=ffpeOBF.unfiltered_maf,
              origMaf=inMAF,
              diskSize=calcDiskSizes.threeMafGB,
              id=TUM_ID    
	    	}

	call maf_merge_blat_oxog_ffpe_mp1_mp2_task {
		input:
			oxog_all=oxoGmaf.unFiltIndels,
			oxog_pass=oxoGmaf.filtIndels,
			ffpe_all=ffpemaf.unFiltIndels,
			ffpe_pass=ffpemaf.filtIndels,
			pon_one_zip=mp1.mpOutzip,
			pon_two_zip=mp2.mpOutzip,
			blat_maf_pass=blat.blat_results,
			blat_maf_all=blat.blat_all_maf,
			id=TUM_ID,
			diskGB=calcDiskSizes.tfMafGB,
			inputMaf=inMAF
		}

   	call maf_counter_task as maf_pon1_counter {
    	input:
    		all_Maf=maf_merge_blat_oxog_ffpe_mp1_mp2_task.mp1_all_maf,
    		pass_Maf=maf_merge_blat_oxog_ffpe_mp1_mp2_task.mp1_pass_maf,
    		diskGB=calcDiskSizes.oneMafGB
    	}
	
	call maf_counter_task as maf_pon2_counter {
    	input:
    		all_Maf=maf_merge_blat_oxog_ffpe_mp1_mp2_task.mp2_all_maf,
    		pass_Maf=maf_merge_blat_oxog_ffpe_mp1_mp2_task.mp2_pass_maf,
    		diskGB=calcDiskSizes.oneMafGB
    	}


    call maf_counter_task as maf_obf_ffpe_counter {
    	input:
    		all_Maf=ffpemaf.unFiltIndels,
    		pass_Maf=ffpemaf.filtIndels,
    		diskGB=calcDiskSizes.oneMafGB
    	}

    call maf_counter_task as maf_obf_oxoG_counter {
    	input:
    		all_Maf=oxoGmaf.unFiltIndels,
    		pass_Maf=oxoGmaf.filtIndels,
    		diskGB=calcDiskSizes.oneMafGB
    	}

    call maf_counter_task as maf_blat_counter {
    	input:
    		all_Maf=blat.blat_results,
    		pass_Maf=blat.blat_all_maf,
    		diskGB=calcDiskSizes.oneMafGB
    	}

    call maf_counter_task as maf_filter_counter {
    	input:
    		all_Maf=maf_merge_blat_oxog_ffpe_mp1_mp2_task.all_maf,
    		pass_Maf=maf_merge_blat_oxog_ffpe_mp1_mp2_task.pass_maf,
    		diskGB=calcDiskSizes.oneMafGB
    	}

	output {
		maf_merge_blat_oxog_ffpe_mp1_mp2_task.all_maf
		maf_merge_blat_oxog_ffpe_mp1_mp2_task.pass_maf
		maf_pon1_counter.all_count
		maf_pon1_counter.pass_count
		maf_pon2_counter.all_count
		maf_pon2_counter.pass_count
		maf_obf_oxoG_counter.all_count
		maf_obf_oxoG_counter.pass_count
		maf_obf_ffpe_counter.all_count
		maf_obf_ffpe_counter.pass_count
		maf_blat_counter.all_count
		maf_blat_counter.pass_count
		maf_filter_counter.all_count
		maf_filter_counter.pass_count
		}

	}
